`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date:    10:21:09 01/27/2015 
// Design Name: 
// Module Name:    icap_controller 
// Project Name: 
// Target Devices: 
// Tool versions: 
// Description: 
//
// Dependencies: 
//
// Revision: 
// Revision 0.01 - File Created
// Additional Comments: 
//
//////////////////////////////////////////////////////////////////////////////////
module ICAP_data_size_converter	#(
		parameter DATA_SIZE = 256,
		parameter ICAP_DATA_SIZE = 32
	)
	(
		input 									clock,
		input 									reset,
    
    // 256bit FIFO interface
		input 	                      	          in_valid,
		input 	[DATA_SIZE - 1 :  0] 	            in_data,
    input 	[7:0]] 	                          in_strb,
		output  reg                               out_ready,	
    
    // 32-bit ICAP interfce
    input                             in_ready,
		output reg [ICAP_DATA_SIZE - 1:0] out_data,
		output reg                     	  out_valid
    );

    // State
		localparam IDLE 						= 1'b0;
		localparam DIVIDE_DATA 		  = 1'b1;
		
		//enable and disable for fifo and icap
		localparam ENABLE 			= 1'b0;
		localparam DISABLE 			= 1'b1;
		
		//register
		reg [1 : 0] state, next_state;
		reg [7 : 0] data_sel, next_data_sel;

	always @(posedge clock)	begin
		if (!reset)	begin
      state    <= IDLE;
      data_sel <= 8'b0000_0001;
    end
  	else begin
      state    <= next_state;
      data_sel <= next_data_sel;
    end
	end

	always @(*)	begin
    out_valid = 1'b0;
    out_ready = 1'b1;
    
    next_state = state;
    next_data_sel = data_sel;
		case(state)
			IDLE: begin
				if (in_valid) begin
          out_valid = 1'b1;
          out_ready = 1'b0;
          next_state = (in_ready)    ? DIVIDE_DATA : IDLE;
          next_data_sel = (in_ready) ? {data_sel[6:1], data_sel[7]} : data_sel;
        end
			end
			DIVIDE_DATA: begin
        out_valid = 1'b1;
        out_ready = 1'b0;        
        if (in_ready) begin
          out_ready     = data_sel[7];
          next_state    = data_sel[7] ? IDLE : DIVIDE_DATA;
          next_data_sel = {data_sel[6:1], data_sel[7]};
        end
			end
		endcase
	end
  assign out_data =   ({32{data_sel[7]}} & in_data[(8*32 - 1) : (7*32)]) 
                    | ({32{data_sel[6]}} & in_data[(7*32 - 1) : (6*32)]) 
                    | ({32{data_sel[5]}} & in_data[(6*32 - 1) : (6*32)]) 
                    | ({32{data_sel[4]}} & in_data[(5*32 - 1) : (4*32)]) 
                    | ({32{data_sel[3]}} & in_data[(4*32 - 1) : (3*32)]) 
                    | ({32{data_sel[2]}} & in_data[(3*32 - 1) : (2*32)]) 
                    | ({32{data_sel[1]}} & in_data[(1*32 - 1) : (1*32)]) 
                    | ({32{data_sel[0]}} & in_data[(1*32 - 1) : (0*32)]) 
endmodule
